/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

#include <stdint.h>

#include <avro/data.h>

/*
 * This file creates function prototypes for various comparison
 * operations for schema-specific types.
 */


/* Define some helper macros */

#define AVRO_TYPE_REF(tp, type, ref)  AVRO_TYPE_REF_##type(tp, ref)

#define AVRO_TYPE_REF_boolean(tp, ref)      avro_raw_boolean_t
#define AVRO_TYPE_REF_bytes(tp, ref)        avro_raw_bytes_t
#define AVRO_TYPE_REF_float(tp, ref)        avro_raw_float_t
#define AVRO_TYPE_REF_double(tp, ref)       avro_raw_double_t
#define AVRO_TYPE_REF_int(tp, ref)          avro_raw_int_t
#define AVRO_TYPE_REF_long(tp, ref)         avro_raw_long_t
#define AVRO_TYPE_REF_null(tp, ref)         avro_raw_null_t
#define AVRO_TYPE_REF_string(tp, ref)       avro_raw_string_t

#define AVRO_TYPE_REF_array(tp, ref)        tp##_array_##ref##_t
#define AVRO_TYPE_REF_enum(tp, ref)         tp##_##ref##_t
#define AVRO_TYPE_REF_fixed(tp, ref)        tp##_##ref##_t
#define AVRO_TYPE_REF_map(tp, ref)          tp##_map_##ref##_t
#define AVRO_TYPE_REF_record(tp, ref)       tp##_##ref##_t
#define AVRO_TYPE_REF_recursive(tp, ref)    tp##_##ref##_t *
#define AVRO_TYPE_REF_union(tp, ref)        tp##_##ref##_t


#define AVRO_TYPE_NAME(type, ref)  AVRO_TYPE_NAME_##type(ref)

#define AVRO_TYPE_NAME_boolean(ref)         boolean_val
#define AVRO_TYPE_NAME_bytes(ref)           bytes_val
#define AVRO_TYPE_NAME_float(ref)           float_val
#define AVRO_TYPE_NAME_double(ref)          double_val
#define AVRO_TYPE_NAME_int(ref)             int_val
#define AVRO_TYPE_NAME_long(ref)            long_val
#define AVRO_TYPE_NAME_null(ref)            null_val
#define AVRO_TYPE_NAME_string(ref)          string_val

#define AVRO_TYPE_NAME_array(ref)           array##_##ref
#define AVRO_TYPE_NAME_enum(ref)            ref
#define AVRO_TYPE_NAME_fixed(ref)           ref
#define AVRO_TYPE_NAME_map(ref)             map##_##ref
#define AVRO_TYPE_NAME_record(ref)          ref
#define AVRO_TYPE_NAME_recursive(ref)       ref
#define AVRO_TYPE_NAME_union(ref)           ref


#define AVRO_EQUALS(tp, type, ref, e1, e2)  AVRO_EQUALS_##type(tp, ref, e1, e2)

#define AVRO_EQUALS_boolean(tp, ref, e1, e2) \
	avro_raw_boolean_equals(e1, e2)
#define AVRO_EQUALS_bytes(tp, ref, e1, e2) \
	avro_raw_bytes_equals(e1, e2)
#define AVRO_EQUALS_float(tp, ref, e1, e2) \
	avro_raw_float_equals(e1, e2)
#define AVRO_EQUALS_double(tp, ref, e1, e2) \
	avro_raw_double_equals(e1, e2)
#define AVRO_EQUALS_int(tp, ref, e1, e2) \
	avro_raw_int_equals(e1, e2)
#define AVRO_EQUALS_long(tp, ref, e1, e2) \
	avro_raw_long_equals(e1, e2)
#define AVRO_EQUALS_null(tp, ref, e1, e2) \
	avro_raw_null_equals(e1, e2)
#define AVRO_EQUALS_string(tp, ref, e1, e2) \
	avro_raw_string_equals(e1, e2)

#define AVRO_EQUALS_array(tp, ref, e1, e2) \
	tp##_array_##ref##_equals(e1, e2)
#define AVRO_EQUALS_enum(tp, ref, e1, e2) \
	tp##_##ref##_equals(e1, e2)
#define AVRO_EQUALS_fixed(tp, ref, e1, e2) \
	tp##_##ref##_equals(e1, e2)
#define AVRO_EQUALS_map(tp, ref, e1, e2) \
	tp##_map_##ref##_equals(e1, e2)
#define AVRO_EQUALS_record(tp, ref, e1, e2) \
	tp##_##ref##_equals(e1, e2)
#define AVRO_EQUALS_recursive(tp, ref, e1, e2) \
	tp##_##ref##_equals(*e1, *e2)
#define AVRO_EQUALS_union(tp, ref, e1, e2) \
	tp##_##ref##_equals(e1, e2)


/* Define the macros that can be used in SCHEMA_DEFINITION */

#define AVRO_ARRAY(tp, name, itype, iref) \
	int \
	tp##_array_##name##_equals(const tp##_array_##name##_t *obj1, \
				   const tp##_array_##name##_t *obj2) \
	{ \
		if (obj1 == obj2) { \
			return 1; \
		} \
		if (!obj1 || !obj2) { \
			return 0; \
		} \
		size_t  size1 = tp##_array_##name##_size(obj1); \
		size_t  size2 = tp##_array_##name##_size(obj2); \
		if (size1 != size2) { \
			return 0; \
		} \
		size_t  i; \
		for (i = 0; i < size1; i++) { \
			AVRO_TYPE_REF(tp, itype, iref)  *e1 = \
			    tp##_array_##name##_get(obj1, i); \
			AVRO_TYPE_REF(tp, itype, iref)  *e2 = \
			    tp##_array_##name##_get(obj2, i); \
			if (!AVRO_EQUALS(tp, itype, iref, e1, e2)) { \
				return 0; \
			} \
		} \
		return 1; \
	}

#define AVRO_ENUM_START(tp, name) \
	int \
	tp##_##name##_equals(const tp##_##name##_t *obj1, \
			     const tp##_##name##_t *obj2) \
	{ \
		if (obj1 == obj2) { \
			return 1; \
		} \
		if (!obj1 || !obj2) { \
			return 0; \
		} \
		return *obj1 == *obj2; \
	}

#define AVRO_FIXED(tp, name, size) \
	int \
	tp##_##name##_equals(const tp##_##name##_t *obj1, \
			     const tp##_##name##_t *obj2) \
	{ \
		if (obj1 == obj2) { \
			return 1; \
		} \
		if (!obj1 || !obj2) { \
			return 0; \
		} \
		return (memcmp(obj1->contents, obj2->contents, size) == 0); \
	}

#define AVRO_MAP(tp, name, itype, iref) \
	int \
	tp##_map_##name##_equals(const tp##_map_##name##_t *obj1, \
				 const tp##_map_##name##_t *obj2) \
	{ \
		if (obj1 == obj2) { \
			return 1; \
		} \
		if (!obj1 || !obj2) { \
			return 0; \
		} \
		size_t  size1 = tp##_map_##name##_size(obj1); \
		size_t  size2 = tp##_map_##name##_size(obj2); \
		if (size1 != size2) { \
			return 0; \
		} \
		size_t  i; \
		for (i = 0; i < size1; i++) { \
			AVRO_TYPE_REF(tp, itype, iref)  *e1 = \
			    tp##_map_##name##_get_by_index(obj1, i); \
			AVRO_TYPE_REF(tp, itype, iref)  *e2 = \
			    tp##_map_##name##_get_by_index(obj2, i); \
			if (!AVRO_EQUALS(tp, itype, iref, e1, e2)) { \
				return 0; \
			} \
		} \
		return 1; \
	}

#define AVRO_RECORD_START(tp, name) \
	int \
	tp##_##name##_equals(const tp##_##name##_t *obj1, \
			     const tp##_##name##_t *obj2) \
	{ \
		if (obj1 == obj2) { \
			return 1; \
		} \
		if (!obj1 || !obj2) { \
			return 0; \
		}

#define AVRO_RECORD_FIELD(tp, name, idx, field, ftype, fref, first, last) \
		if (!AVRO_EQUALS \
		     (tp, ftype, fref, &obj1->field, &obj2->field)) { \
			return 0; \
		}

#define AVRO_RECORD_END(tp, name) \
		return 1; \
	}

#define AVRO_UNION_START(tp, name) \
	int \
	tp##_##name##_equals(const tp##_##name##_t *obj1, \
			     const tp##_##name##_t *obj2) \
	{ \
		if (obj1 == obj2) { \
			return 1; \
		} \
		if (!obj1 || !obj2) { \
			return 0; \
		} \
		if (obj1->discriminant != obj2->discriminant) { \
			return 0; \
		}

#define AVRO_UNION_BRANCH(tp, name, index, btype, bref, first, last) \
		if (obj1->discriminant == index) { \
			return AVRO_EQUALS \
			    (tp, btype, bref, \
			     &obj1->branch.AVRO_TYPE_NAME(btype, bref), \
			     &obj2->branch.AVRO_TYPE_NAME(btype, bref)); \
		}

#define AVRO_UNION_END(tp, name) \
		return 0; \
	}

#define AVRO_FORWARD(tp, type, name)                                  /* nothing */
#define AVRO_ENUM_SYMBOL(TP, NAME, symbol, value, first, last)        /* nothing */
#define AVRO_ENUM_END(tp, name)                                       /* nothing */


/* Call SCHEMA_DEFINITION to generate the code */

SCHEMA_DEFINITION()


/* Undefine everything when we're done */

#undef AVRO_TYPE_REF
#undef AVRO_TYPE_REF_boolean
#undef AVRO_TYPE_REF_bytes
#undef AVRO_TYPE_REF_float
#undef AVRO_TYPE_REF_double
#undef AVRO_TYPE_REF_int
#undef AVRO_TYPE_REF_long
#undef AVRO_TYPE_REF_null
#undef AVRO_TYPE_REF_string
#undef AVRO_TYPE_REF_array
#undef AVRO_TYPE_REF_enum
#undef AVRO_TYPE_REF_fixed
#undef AVRO_TYPE_REF_map
#undef AVRO_TYPE_REF_record
#undef AVRO_TYPE_REF_recursive
#undef AVRO_TYPE_REF_union

#undef AVRO_TYPE_NAME
#undef AVRO_TYPE_NAME_boolean
#undef AVRO_TYPE_NAME_bytes
#undef AVRO_TYPE_NAME_float
#undef AVRO_TYPE_NAME_double
#undef AVRO_TYPE_NAME_int
#undef AVRO_TYPE_NAME_long
#undef AVRO_TYPE_NAME_null
#undef AVRO_TYPE_NAME_string
#undef AVRO_TYPE_NAME_array
#undef AVRO_TYPE_NAME_enum
#undef AVRO_TYPE_NAME_fixed
#undef AVRO_TYPE_NAME_map
#undef AVRO_TYPE_NAME_record
#undef AVRO_TYPE_NAME_recursive
#undef AVRO_TYPE_NAME_union

#undef AVRO_EQUALS
#undef AVRO_EQUALS_boolean
#undef AVRO_EQUALS_bytes
#undef AVRO_EQUALS_float
#undef AVRO_EQUALS_double
#undef AVRO_EQUALS_int
#undef AVRO_EQUALS_long
#undef AVRO_EQUALS_null
#undef AVRO_EQUALS_string
#undef AVRO_EQUALS_array
#undef AVRO_EQUALS_enum
#undef AVRO_EQUALS_fixed
#undef AVRO_EQUALS_map
#undef AVRO_EQUALS_record
#undef AVRO_EQUALS_recursive
#undef AVRO_EQUALS_union

#undef AVRO_FORWARD
#undef AVRO_ARRAY
#undef AVRO_ENUM_START
#undef AVRO_ENUM_SYMBOL
#undef AVRO_ENUM_END
#undef AVRO_FIXED
#undef AVRO_MAP
#undef AVRO_RECORD_START
#undef AVRO_RECORD_FIELD
#undef AVRO_RECORD_END
#undef AVRO_UNION_START
#undef AVRO_UNION_BRANCH
#undef AVRO_UNION_END
