/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * This file creates prototypes for the functions that manipulate union
 * values.
 */


/* Define some helper macros */

#define AVRO_TYPE_NAME(type, ref)  AVRO_TYPE_NAME_##type(ref)

#define AVRO_TYPE_NAME_boolean(ref)         boolean
#define AVRO_TYPE_NAME_bytes(ref)           bytes
#define AVRO_TYPE_NAME_float(ref)           float
#define AVRO_TYPE_NAME_double(ref)          double
#define AVRO_TYPE_NAME_int(ref)             int
#define AVRO_TYPE_NAME_long(ref)            long
#define AVRO_TYPE_NAME_null(ref)            null
#define AVRO_TYPE_NAME_string(ref)          string

#define AVRO_TYPE_NAME_array(ref)           array##_##ref
#define AVRO_TYPE_NAME_enum(ref)            ref
#define AVRO_TYPE_NAME_fixed(ref)           ref
#define AVRO_TYPE_NAME_map(ref)             map##_##ref
#define AVRO_TYPE_NAME_record(ref)          ref
#define AVRO_TYPE_NAME_recursive(ref)       ref
#define AVRO_TYPE_NAME_union(ref)           ref


#define AVRO_UNION_SET_(tp, name, bname) \
	void tp##_##name##_set_##bname(tp##_##name##_t *obj);
#define AVRO_UNION_SET(tp, name, bname) AVRO_UNION_SET_(tp, name, bname)


/* Define the macros that can be used in SCHEMA_DEFINITION */

#define AVRO_UNION_START(tp, name) \
	void tp##_##name##_clear(tp##_##name##_t *obj);

#define AVRO_UNION_BRANCH(tp, name, index, btype, bref, first, last) \
	AVRO_UNION_SET(tp, name, AVRO_TYPE_NAME(btype, bref))

#define AVRO_FORWARD(tp, type, name)                                  /* nothing */
#define AVRO_ARRAY(tp, name, itype, iref)                             /* nothing */
#define AVRO_MAP(tp, name, itype, iref)                               /* nothing */
#define AVRO_ENUM_START(tp, name)                                     /* nothing */
#define AVRO_ENUM_SYMBOL(TP, NAME, symbol, value, first, last)        /* nothing */
#define AVRO_ENUM_END(tp, name)                                       /* nothing */
#define AVRO_FIXED(tp, name, size)                                    /* nothing */
#define AVRO_RECORD_START(tp, name)                                   /* nothing */
#define AVRO_RECORD_FIELD(tp, name, field, ftype, fref, first, last)  /* nothing */
#define AVRO_RECORD_END(tp, name)                                     /* nothing */
#define AVRO_UNION_END(tp, name)                                      /* nothing */


/* Call SCHEMA_DEFINITION to generate the code */

SCHEMA_DEFINITION()


/* Undefine everything when we're done */

#undef AVRO_TYPE_NAME
#undef AVRO_TYPE_NAME_boolean
#undef AVRO_TYPE_NAME_bytes
#undef AVRO_TYPE_NAME_float
#undef AVRO_TYPE_NAME_double
#undef AVRO_TYPE_NAME_int
#undef AVRO_TYPE_NAME_long
#undef AVRO_TYPE_NAME_null
#undef AVRO_TYPE_NAME_string
#undef AVRO_TYPE_NAME_array
#undef AVRO_TYPE_NAME_enum
#undef AVRO_TYPE_NAME_fixed
#undef AVRO_TYPE_NAME_map
#undef AVRO_TYPE_NAME_record
#undef AVRO_TYPE_NAME_recursive
#undef AVRO_TYPE_NAME_union

#undef AVRO_UNION_SET
#undef AVRO_UNION_SET_

#undef AVRO_FORWARD
#undef AVRO_ARRAY
#undef AVRO_ENUM_START
#undef AVRO_ENUM_SYMBOL
#undef AVRO_ENUM_END
#undef AVRO_FIXED
#undef AVRO_MAP
#undef AVRO_RECORD_START
#undef AVRO_RECORD_FIELD
#undef AVRO_RECORD_END
#undef AVRO_UNION_START
#undef AVRO_UNION_BRANCH
#undef AVRO_UNION_END
