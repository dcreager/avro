/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

#include <avro.h>
#include <avro/allocation.h>
#include <avro/consumer.h>
#include <avro/specific.h>

/*
 * This file implements the functions that consume instances of a
 * schema-specific data type.
 */


/* Define some helper macros */

#define AVRO_TYPE_REF(tp, type, ref)  AVRO_TYPE_REF_##type(tp, ref)

#define AVRO_TYPE_REF_boolean(tp, ref)      avro_raw_boolean_t
#define AVRO_TYPE_REF_bytes(tp, ref)        avro_raw_bytes_t
#define AVRO_TYPE_REF_float(tp, ref)        avro_raw_float_t
#define AVRO_TYPE_REF_double(tp, ref)       avro_raw_double_t
#define AVRO_TYPE_REF_int(tp, ref)          avro_raw_int_t
#define AVRO_TYPE_REF_long(tp, ref)         avro_raw_long_t
#define AVRO_TYPE_REF_null(tp, ref)         avro_raw_null_t
#define AVRO_TYPE_REF_string(tp, ref)       avro_raw_string_t

#define AVRO_TYPE_REF_array(tp, ref)        tp##_array_##ref##_t
#define AVRO_TYPE_REF_enum(tp, ref)         tp##_##ref##_t
#define AVRO_TYPE_REF_fixed(tp, ref)        tp##_##ref##_t
#define AVRO_TYPE_REF_map(tp, ref)          tp##_map_##ref##_t
#define AVRO_TYPE_REF_record(tp, ref)       tp##_##ref##_t
#define AVRO_TYPE_REF_recursive(tp, ref)    tp##_##ref##_t *
#define AVRO_TYPE_REF_union(tp, ref)        tp##_##ref##_t


#define AVRO_TYPE_NAME(type, ref)  AVRO_TYPE_NAME_##type(ref)

#define AVRO_TYPE_NAME_boolean(ref)         boolean_val
#define AVRO_TYPE_NAME_bytes(ref)           bytes_val
#define AVRO_TYPE_NAME_float(ref)           float_val
#define AVRO_TYPE_NAME_double(ref)          double_val
#define AVRO_TYPE_NAME_int(ref)             int_val
#define AVRO_TYPE_NAME_long(ref)            long_val
#define AVRO_TYPE_NAME_null(ref)            null_val
#define AVRO_TYPE_NAME_string(ref)          string_val

#define AVRO_TYPE_NAME_array(ref)           array##_##ref
#define AVRO_TYPE_NAME_enum(ref)            ref
#define AVRO_TYPE_NAME_fixed(ref)           ref
#define AVRO_TYPE_NAME_map(ref)             map##_##ref
#define AVRO_TYPE_NAME_record(ref)          ref
#define AVRO_TYPE_NAME_recursive(ref)       ref
#define AVRO_TYPE_NAME_union(ref)           ref


#define AVRO_TYPE_CONSUME(tp, type, ref, name, c, ud)  AVRO_TYPE_CONSUME_##type(tp, ref, name, c, ud)

#define AVRO_TYPE_CONSUME_boolean(tp, ref, name, c, ud)  avro_raw_boolean_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_bytes(tp, ref, name, c, ud)    avro_raw_bytes_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_double(tp, ref, name, c, ud)    avro_raw_double_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_float(tp, ref, name, c, ud)   avro_raw_float_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_int(tp, ref, name, c, ud)      avro_raw_int_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_long(tp, ref, name, c, ud)     avro_raw_long_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_null(tp, ref, name, c, ud)     avro_raw_null_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_string(tp, ref, name, c, ud)   avro_raw_string_consume(name, c, ud)

#define AVRO_TYPE_CONSUME_array(tp, ref, name, c, ud)      tp##_array_##ref##_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_enum(tp, ref, name, c, ud)       tp##_##ref##_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_fixed(tp, ref, name, c, ud)      tp##_##ref##_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_map(tp, ref, name, c, ud)        tp##_map_##ref##_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_record(tp, ref, name, c, ud)     tp##_##ref##_consume(name, c, ud)
#define AVRO_TYPE_CONSUME_recursive(tp, ref, name, c, ud) \
	(*name)? tp##_##ref##_consume(*name, c, ud): EINVAL
#define AVRO_TYPE_CONSUME_union(tp, ref, name, c, ud)      tp##_##ref##_consume(name, c, ud)


/* Define the macros that can be used in SCHEMA_DEFINITION */

#define AVRO_ARRAY(tp, name, itype, iref) \
	int \
	tp##_array_##name##_consume(const tp##_array_##name##_t *obj, \
				    avro_consumer_t *consumer, \
				    void *user_data) \
	{ \
		size_t  element_count = avro_raw_array_size(&obj->array); \
		int  rval; \
		rval = avro_consumer_call(consumer, array_start_block, \
					  1, element_count, user_data); \
		if (rval) { return rval; } \
		\
		unsigned int  i; \
		for (i = 0; i < element_count; i++) { \
			avro_consumer_t  *e_consumer = NULL; \
			void  *e_user_data = NULL; \
			rval = avro_consumer_call(consumer, array_element, i, \
						  &e_consumer, &e_user_data, \
						  user_data); \
			if (rval) { return rval; } \
			AVRO_TYPE_REF(tp, itype, iref)  *elem = \
			    &avro_raw_array_get \
			    (&obj->array, AVRO_TYPE_REF(tp, itype, iref), i); \
			rval = AVRO_TYPE_CONSUME \
			    (tp, itype, iref, elem, e_consumer, e_user_data); \
			if (rval) { return rval; } \
		} \
		return avro_consumer_call(consumer, array_start_block, \
					  0, 0, user_data); \
	}


#define AVRO_ENUM_START(tp, name) \
	int \
	tp##_##name##_consume(const tp##_##name##_t *obj, \
			      avro_consumer_t *consumer, \
			      void *user_data) \
	{ \
		return avro_consumer_call(consumer, enum_value, \
					  *obj, user_data); \
	}


#define AVRO_FIXED(tp, name, size) \
	int \
	tp##_##name##_consume(const tp##_##name##_t *obj, \
			      avro_consumer_t *consumer, \
			      void *user_data) \
	{ \
		char  *bytes_copy = avro_malloc(size); \
		if (!bytes_copy) { \
			avro_set_error("Cannot allocate buffer for fixed value"); \
			return ENOMEM; \
		} \
		memcpy(bytes_copy, obj->contents, size); \
		return avro_consumer_call(consumer, fixed_value, \
					  bytes_copy, size, user_data); \
	}


#define AVRO_MAP(tp, name, itype, iref) \
	int \
	tp##_map_##name##_consume(const tp##_map_##name##_t *obj, \
				  avro_consumer_t *consumer, \
				  void *user_data) \
	{ \
		size_t  element_count = avro_raw_map_size(&obj->map); \
		int  rval; \
		rval = avro_consumer_call(consumer, map_start_block, \
					  1, element_count, user_data); \
		if (rval) { return rval; } \
		\
		unsigned int  i; \
		for (i = 0; i < element_count; i++) { \
			const char  *key = avro_raw_map_get_key(&obj->map, i); \
			avro_consumer_t  *e_consumer = NULL; \
			void  *e_user_data = NULL; \
			rval = avro_consumer_call(consumer, map_element, \
						  i, key, \
						  &e_consumer, &e_user_data, \
						  user_data); \
			if (rval) { return rval; } \
			AVRO_TYPE_REF(tp, itype, iref)  *elem = \
			    &avro_raw_map_get_by_index \
			    (&obj->map, AVRO_TYPE_REF(tp, itype, iref), i); \
			rval = AVRO_TYPE_CONSUME \
			    (tp, itype, iref, elem, e_consumer, e_user_data); \
			if (rval) { return rval; } \
		} \
		return avro_consumer_call(consumer, map_start_block, \
					  0, 0, user_data); \
	}

#define AVRO_RECORD_START(tp, name) \
	int \
	tp##_##name##_consume(const tp##_##name##_t *obj, \
			      avro_consumer_t *consumer, \
			      void *user_data) \
	{ \
		int  rval; \
		rval = avro_consumer_call(consumer, record_start, user_data); \
		if (rval) { return rval; } \

#define AVRO_RECORD_FIELD(tp, name, i, field, ftype, fref, first, last) \
		{ \
			avro_consumer_t  *f_consumer = NULL; \
			void  *f_user_data = NULL; \
			rval = avro_consumer_call(consumer, record_field, i, \
						  &f_consumer, &f_user_data, \
						  user_data); \
			if (rval) { return rval; } \
			rval = AVRO_TYPE_CONSUME \
			    (tp, ftype, fref, &obj->field, \
			     f_consumer, f_user_data); \
			if (rval) { return rval; } \
		}

#define AVRO_RECORD_END(tp, name) \
		return 0; \
	}


#define AVRO_UNION_START(tp, name) \
	int \
	tp##_##name##_consume(const tp##_##name##_t *obj, \
			      avro_consumer_t *consumer, \
			      void *user_data) \
	{ \
		int  rval; \
		avro_consumer_t  *b_consumer = NULL; \
		void  *b_user_data = NULL; \
		rval = avro_consumer_call(consumer, union_branch, \
					  obj->discriminant, \
					  &b_consumer, &b_user_data, \
					  user_data); \
		if (rval) { return rval; }

#define AVRO_UNION_BRANCH(tp, name, index, btype, bref, first, last) \
		if (obj->discriminant == index) { \
			return AVRO_TYPE_CONSUME \
			    (tp, btype, bref, \
			     &obj->branch.AVRO_TYPE_NAME(btype, bref), \
			     b_consumer, b_user_data); \
		}

#define AVRO_UNION_END(tp, name) \
		return 0; \
	}

#define AVRO_FORWARD(tp, type, name)                                  /* nothing */
#define AVRO_ENUM_SYMBOL(TP, NAME, symbol, value, first, last)        /* nothing */
#define AVRO_ENUM_END(tp, name)                                       /* nothing */

/* Call SCHEMA_DEFINITION to generate the code */

SCHEMA_DEFINITION()


/* Undefine everything when we're done */

#undef AVRO_TYPE_REF
#undef AVRO_TYPE_REF_boolean
#undef AVRO_TYPE_REF_bytes
#undef AVRO_TYPE_REF_float
#undef AVRO_TYPE_REF_double
#undef AVRO_TYPE_REF_int
#undef AVRO_TYPE_REF_long
#undef AVRO_TYPE_REF_null
#undef AVRO_TYPE_REF_string
#undef AVRO_TYPE_REF_array
#undef AVRO_TYPE_REF_enum
#undef AVRO_TYPE_REF_fixed
#undef AVRO_TYPE_REF_map
#undef AVRO_TYPE_REF_record
#undef AVRO_TYPE_REF_recursive
#undef AVRO_TYPE_REF_union

#undef AVRO_TYPE_NAME
#undef AVRO_TYPE_NAME_boolean
#undef AVRO_TYPE_NAME_bytes
#undef AVRO_TYPE_NAME_float
#undef AVRO_TYPE_NAME_double
#undef AVRO_TYPE_NAME_int
#undef AVRO_TYPE_NAME_long
#undef AVRO_TYPE_NAME_null
#undef AVRO_TYPE_NAME_string
#undef AVRO_TYPE_NAME_array
#undef AVRO_TYPE_NAME_enum
#undef AVRO_TYPE_NAME_fixed
#undef AVRO_TYPE_NAME_map
#undef AVRO_TYPE_NAME_record
#undef AVRO_TYPE_NAME_recursive
#undef AVRO_TYPE_NAME_union

#undef AVRO_TYPE_CONSUME
#undef AVRO_TYPE_CONSUME_boolean
#undef AVRO_TYPE_CONSUME_bytes
#undef AVRO_TYPE_CONSUME_float
#undef AVRO_TYPE_CONSUME_double
#undef AVRO_TYPE_CONSUME_int
#undef AVRO_TYPE_CONSUME_long
#undef AVRO_TYPE_CONSUME_null
#undef AVRO_TYPE_CONSUME_string
#undef AVRO_TYPE_CONSUME_array
#undef AVRO_TYPE_CONSUME_enum
#undef AVRO_TYPE_CONSUME_fixed
#undef AVRO_TYPE_CONSUME_map
#undef AVRO_TYPE_CONSUME_record
#undef AVRO_TYPE_CONSUME_recursive
#undef AVRO_TYPE_CONSUME_union

#undef AVRO_FORWARD
#undef AVRO_ARRAY
#undef AVRO_ENUM_START
#undef AVRO_ENUM_SYMBOL
#undef AVRO_ENUM_END
#undef AVRO_FIXED
#undef AVRO_MAP
#undef AVRO_RECORD_START
#undef AVRO_RECORD_FIELD
#undef AVRO_RECORD_END
#undef AVRO_UNION_START
#undef AVRO_UNION_BRANCH
#undef AVRO_UNION_END
