/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

#include <stdint.h>
#include <string.h>

#include <avro/allocation.h>
#include <avro/data.h>

/*
 * This file implements the _done and _free functions.
 */


/* Define some helper macros */

#define AVRO_TYPE_REF(tp, type, ref)  AVRO_TYPE_REF_##type(tp, ref)

#define AVRO_TYPE_REF_boolean(tp, ref)      int
#define AVRO_TYPE_REF_bytes(tp, ref)        avro_raw_string_t
#define AVRO_TYPE_REF_float(tp, ref)        float
#define AVRO_TYPE_REF_double(tp, ref)       double
#define AVRO_TYPE_REF_int(tp, ref)          int32_t
#define AVRO_TYPE_REF_long(tp, ref)         int64_t
#define AVRO_TYPE_REF_null(tp, ref)         int
#define AVRO_TYPE_REF_string(tp, ref)       avro_raw_string_t

#define AVRO_TYPE_REF_array(tp, ref)        tp##_array_##ref##_t
#define AVRO_TYPE_REF_enum(tp, ref)         tp##_##ref##_t
#define AVRO_TYPE_REF_fixed(tp, ref)        tp##_##ref##_t
#define AVRO_TYPE_REF_map(tp, ref)          tp##_map_##ref##_t
#define AVRO_TYPE_REF_record(tp, ref)       tp##_##ref##_t
#define AVRO_TYPE_REF_recursive(tp, ref)    tp##_##ref##_t *
#define AVRO_TYPE_REF_union(tp, ref)        tp##_##ref##_t


#define AVRO_TYPE_NAME(type, ref)  AVRO_TYPE_NAME_##type(ref)

#define AVRO_TYPE_NAME_boolean(ref)         boolean_val
#define AVRO_TYPE_NAME_bytes(ref)           bytes_val
#define AVRO_TYPE_NAME_float(ref)           float_val
#define AVRO_TYPE_NAME_double(ref)          double_val
#define AVRO_TYPE_NAME_int(ref)             int_val
#define AVRO_TYPE_NAME_long(ref)            long_val
#define AVRO_TYPE_NAME_null(ref)            null_val
#define AVRO_TYPE_NAME_string(ref)          string_val

#define AVRO_TYPE_NAME_array(ref)           array##_##ref
#define AVRO_TYPE_NAME_enum(ref)            ref
#define AVRO_TYPE_NAME_fixed(ref)           ref
#define AVRO_TYPE_NAME_map(ref)             map##_##ref
#define AVRO_TYPE_NAME_record(ref)          ref
#define AVRO_TYPE_NAME_recursive(ref)       ref
#define AVRO_TYPE_NAME_union(ref)           ref


#define AVRO_TYPE_DONE(tp, type, ref, name)  AVRO_TYPE_DONE_##type(tp, ref, name)

#define AVRO_TYPE_DONE_boolean(tp, ref, name)  /* nothing to do */
#define AVRO_TYPE_DONE_bytes(tp, ref, name)    avro_raw_string_done(&obj->name)
#define AVRO_TYPE_DONE_float(tp, ref, name)    /* nothing to do */
#define AVRO_TYPE_DONE_double(tp, ref, name)   /* nothing to do */
#define AVRO_TYPE_DONE_int(tp, ref, name)      /* nothing to do */
#define AVRO_TYPE_DONE_long(tp, ref, name)     /* nothing to do */
#define AVRO_TYPE_DONE_null(tp, ref, name)     /* nothing to do */
#define AVRO_TYPE_DONE_string(tp, ref, name)   avro_raw_string_done(&obj->name)

#define AVRO_TYPE_DONE_array(tp, ref, name)      tp##_array_##ref##_done(&obj->name)
#define AVRO_TYPE_DONE_enum(tp, ref, name)       /* nothing to do */
#define AVRO_TYPE_DONE_fixed(tp, ref, name)      /* nothing to do */
#define AVRO_TYPE_DONE_map(tp, ref, name)        tp##_map_##ref##_done(&obj->name)
#define AVRO_TYPE_DONE_record(tp, ref, name)     tp##_##ref##_done(&obj->name)
#define AVRO_TYPE_DONE_recursive(tp, ref, name) \
	if (obj->name) { tp##_##ref##_free(obj->name); obj->name = NULL; }
#define AVRO_TYPE_DONE_union(tp, ref, name)      tp##_##ref##_done(&obj->name)


/* Define the macros that can be used in SCHEMA_DEFINITION */

#define AVRO_ARRAY(tp, name, itype, iref) \
	void tp##_array_##name##_done(tp##_array_##name##_t *obj) \
	{ \
		avro_raw_array_done(&obj->array); \
	} \
	\
	void tp##_array_##name##_free(tp##_array_##name##_t *obj) \
	{ \
		tp##_array_##name##_done(obj); \
		avro_freet(AVRO_TYPE_REF_array(tp, name), obj); \
	}


#define AVRO_MAP(tp, name, itype, iref) \
	void tp##_map_##name##_done(tp##_map_##name##_t *obj) \
	{ \
		avro_raw_map_done(&obj->map); \
	} \
	\
	void tp##_map_##name##_free(tp##_map_##name##_t *obj) \
	{ \
		tp##_map_##name##_done(obj); \
		avro_freet(AVRO_TYPE_REF_map(tp, name), obj); \
	}


#define AVRO_RECORD_START(tp, name) \
	void tp##_##name##_done(tp##_##name##_t *obj) \
	{ \
		(void) obj;

#define AVRO_RECORD_FIELD(tp, name, field, ftype, fref, first, last) \
		AVRO_TYPE_DONE(tp, ftype, fref, field);

#define AVRO_RECORD_END(tp, name) \
	} \
	\
	void tp##_##name##_free(tp##_##name##_t *obj) \
	{ \
		tp##_##name##_done(obj); \
		avro_freet(AVRO_TYPE_REF_record(tp, name), obj); \
	}


#define AVRO_UNION_START(tp, name) \
	void tp##_##name##_clear(tp##_##name##_t *obj) \
	{

#define AVRO_UNION_BRANCH(tp, name, index, btype, bref, first, last) \
		if (obj->discriminant == index) { \
			AVRO_TYPE_DONE(tp, btype, bref, \
				       branch.AVRO_TYPE_NAME(btype, bref)); \
		}

#define AVRO_UNION_END(tp, name) \
		obj->discriminant = -1; \
	} \
	\
	void tp##_##name##_done(tp##_##name##_t *obj) \
	{ \
		tp##_##name##_clear(obj); \
	} \
	\
	void tp##_##name##_free(tp##_##name##_t *obj) \
	{ \
		tp##_##name##_done(obj); \
		avro_freet(AVRO_TYPE_REF_union(tp, name), obj); \
	}


#define AVRO_FORWARD(tp, type, name)                                  /* nothing */
#define AVRO_ENUM_START(tp, name)                                     /* nothing */
#define AVRO_ENUM_SYMBOL(TP, NAME, symbol, value, first, last)        /* nothing */
#define AVRO_ENUM_END(tp, name)                                       /* nothing */
#define AVRO_FIXED(tp, name, size)                                    /* nothing */


/* Call SCHEMA_DEFINITION to generate the code */

SCHEMA_DEFINITION()


/* Undefine everything when we're done */

#undef AVRO_TYPE_REF
#undef AVRO_TYPE_REF_boolean
#undef AVRO_TYPE_REF_bytes
#undef AVRO_TYPE_REF_float
#undef AVRO_TYPE_REF_double
#undef AVRO_TYPE_REF_int
#undef AVRO_TYPE_REF_long
#undef AVRO_TYPE_REF_null
#undef AVRO_TYPE_REF_string
#undef AVRO_TYPE_REF_array
#undef AVRO_TYPE_REF_enum
#undef AVRO_TYPE_REF_fixed
#undef AVRO_TYPE_REF_map
#undef AVRO_TYPE_REF_record
#undef AVRO_TYPE_REF_recursive
#undef AVRO_TYPE_REF_union

#undef AVRO_TYPE_NAME
#undef AVRO_TYPE_NAME_boolean
#undef AVRO_TYPE_NAME_bytes
#undef AVRO_TYPE_NAME_float
#undef AVRO_TYPE_NAME_double
#undef AVRO_TYPE_NAME_int
#undef AVRO_TYPE_NAME_long
#undef AVRO_TYPE_NAME_null
#undef AVRO_TYPE_NAME_string
#undef AVRO_TYPE_NAME_array
#undef AVRO_TYPE_NAME_enum
#undef AVRO_TYPE_NAME_fixed
#undef AVRO_TYPE_NAME_map
#undef AVRO_TYPE_NAME_record
#undef AVRO_TYPE_NAME_recursive
#undef AVRO_TYPE_NAME_union

#undef AVRO_TYPE_DONE
#undef AVRO_TYPE_DONE_boolean
#undef AVRO_TYPE_DONE_bytes
#undef AVRO_TYPE_DONE_float
#undef AVRO_TYPE_DONE_double
#undef AVRO_TYPE_DONE_int
#undef AVRO_TYPE_DONE_long
#undef AVRO_TYPE_DONE_null
#undef AVRO_TYPE_DONE_string
#undef AVRO_TYPE_DONE_array
#undef AVRO_TYPE_DONE_enum
#undef AVRO_TYPE_DONE_fixed
#undef AVRO_TYPE_DONE_map
#undef AVRO_TYPE_DONE_record
#undef AVRO_TYPE_DONE_recursive
#undef AVRO_TYPE_DONE_union

#undef AVRO_FORWARD
#undef AVRO_ARRAY
#undef AVRO_ENUM_START
#undef AVRO_ENUM_SYMBOL
#undef AVRO_ENUM_END
#undef AVRO_FIXED
#undef AVRO_MAP
#undef AVRO_RECORD_START
#undef AVRO_RECORD_FIELD
#undef AVRO_RECORD_END
#undef AVRO_UNION_START
#undef AVRO_UNION_BRANCH
#undef AVRO_UNION_END
