/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

#include <stdint.h>

#include <avro/data.h>
#include <avro/specific.h>

/*
 * This file creates a typedef for each schema in the SCHEMA_DEFINITION.
 */


/* Define some helper macros */

#define COMMA_(val) COMMA_##val
#define COMMA_1   /* no comma for last item in list */
#define COMMA_0   ,


#define AVRO_TYPE_REF(tp, type, ref)  AVRO_TYPE_REF_##type(tp, ref)

#define AVRO_TYPE_REF_boolean(tp, ref)      avro_raw_boolean_t
#define AVRO_TYPE_REF_bytes(tp, ref)        avro_raw_bytes_t
#define AVRO_TYPE_REF_float(tp, ref)        avro_raw_float_t
#define AVRO_TYPE_REF_double(tp, ref)       avro_raw_double_t
#define AVRO_TYPE_REF_int(tp, ref)          avro_raw_int_t
#define AVRO_TYPE_REF_long(tp, ref)         avro_raw_long_t
#define AVRO_TYPE_REF_null(tp, ref)         avro_raw_null_t
#define AVRO_TYPE_REF_string(tp, ref)       avro_raw_string_t

#define AVRO_TYPE_REF_array(tp, ref)        tp##_array_##ref##_t
#define AVRO_TYPE_REF_enum(tp, ref)         tp##_##ref##_t
#define AVRO_TYPE_REF_fixed(tp, ref)        tp##_##ref##_t
#define AVRO_TYPE_REF_map(tp, ref)          tp##_map_##ref##_t
#define AVRO_TYPE_REF_record(tp, ref)       tp##_##ref##_t
#define AVRO_TYPE_REF_recursive(tp, ref)    tp##_##ref##_t *
#define AVRO_TYPE_REF_union(tp, ref)        tp##_##ref##_t


#define AVRO_TYPE_NAME(type, ref)  AVRO_TYPE_NAME_##type(ref)

#define AVRO_TYPE_NAME_boolean(ref)         boolean_val
#define AVRO_TYPE_NAME_bytes(ref)           bytes_val
#define AVRO_TYPE_NAME_float(ref)           float_val
#define AVRO_TYPE_NAME_double(ref)          double_val
#define AVRO_TYPE_NAME_int(ref)             int_val
#define AVRO_TYPE_NAME_long(ref)            long_val
#define AVRO_TYPE_NAME_null(ref)            null_val
#define AVRO_TYPE_NAME_string(ref)          string_val

#define AVRO_TYPE_NAME_array(ref)           array##_##ref
#define AVRO_TYPE_NAME_enum(ref)            ref
#define AVRO_TYPE_NAME_fixed(ref)           ref
#define AVRO_TYPE_NAME_map(ref)             map##_##ref
#define AVRO_TYPE_NAME_record(ref)          ref
#define AVRO_TYPE_NAME_recursive(ref)       ref
#define AVRO_TYPE_NAME_union(ref)           ref


#define AVRO_FORWARD_array(tp, name) \
	typedef struct tp##_array_##name tp##_array_##name##_t;
#define AVRO_FORWARD_enum(tp, name) \
	typedef enum tp##_##name  tp##_##name##_t;
#define AVRO_FORWARD_fixed(tp, name) \
	typedef struct tp##_##name  tp##_##name##_t;
#define AVRO_FORWARD_map(tp, name) \
	typedef struct tp##_map_##name  tp##_map_##name##_t;
#define AVRO_FORWARD_record(tp, name) \
	typedef struct tp##_##name  tp##_##name##_t;
#define AVRO_FORWARD_union(tp, name) \
	typedef struct tp##_##name  tp##_##name##_t;


/* Define the macros that can be used in SCHEMA_DEFINITION */

#define AVRO_FORWARD(tp, type, name)  AVRO_FORWARD_##type(tp, name)


#define AVRO_ARRAY(tp, name, itype, iref) \
	struct tp##_array_##name { \
		avro_raw_array_t  array; \
	};


#define AVRO_ENUM_START(tp, name) \
	enum tp##_##name {

#define AVRO_ENUM_SYMBOL(TP, NAME, symbol, value, first, last) \
		TP##_##NAME##_##symbol = value  COMMA_(last)

#define AVRO_ENUM_END(tp, name) \
	};


#define AVRO_FIXED(tp, name, size) \
	struct tp##_##name { \
		uint8_t  contents[size]; \
	};


#define AVRO_MAP(tp, name, vtype, vref) \
	struct tp##_map_##name { \
		avro_raw_map_t  map; \
	};


#define AVRO_RECORD_START(tp, name) \
	struct tp##_##name {

#define AVRO_RECORD_FIELD(tp, name, field, ftype, fref, first, last) \
		AVRO_TYPE_REF(tp, ftype, fref)  field;

#define AVRO_RECORD_END(tp, name) \
	};


#define AVRO_UNION_START(tp, name) \
	struct tp##_##name { \
		int  discriminant; \
		union { \

#define AVRO_UNION_BRANCH(tp, name, index, btype, bref, first, last) \
			AVRO_TYPE_REF(tp, btype, bref)  AVRO_TYPE_NAME(btype, bref);

#define AVRO_UNION_END(tp, name) \
		} branch; \
	};


/* Call SCHEMA_DEFINITION to generate the code */

SCHEMA_DEFINITION()


/* Undefine everything when we're done */

#undef COMMA_
#undef COMMA_1
#undef COMMA_0

#undef AVRO_TYPE_REF
#undef AVRO_TYPE_REF_boolean
#undef AVRO_TYPE_REF_bytes
#undef AVRO_TYPE_REF_float
#undef AVRO_TYPE_REF_double
#undef AVRO_TYPE_REF_int
#undef AVRO_TYPE_REF_long
#undef AVRO_TYPE_REF_null
#undef AVRO_TYPE_REF_string
#undef AVRO_TYPE_REF_array
#undef AVRO_TYPE_REF_enum
#undef AVRO_TYPE_REF_fixed
#undef AVRO_TYPE_REF_map
#undef AVRO_TYPE_REF_record
#undef AVRO_TYPE_REF_recursive
#undef AVRO_TYPE_REF_union

#undef AVRO_TYPE_NAME
#undef AVRO_TYPE_NAME_boolean
#undef AVRO_TYPE_NAME_bytes
#undef AVRO_TYPE_NAME_float
#undef AVRO_TYPE_NAME_double
#undef AVRO_TYPE_NAME_int
#undef AVRO_TYPE_NAME_long
#undef AVRO_TYPE_NAME_null
#undef AVRO_TYPE_NAME_string
#undef AVRO_TYPE_NAME_array
#undef AVRO_TYPE_NAME_enum
#undef AVRO_TYPE_NAME_fixed
#undef AVRO_TYPE_NAME_map
#undef AVRO_TYPE_NAME_record
#undef AVRO_TYPE_NAME_recursive
#undef AVRO_TYPE_NAME_union

#undef AVRO_FORWARD_array
#undef AVRO_FORWARD_enum
#undef AVRO_FORWARD_fixed
#undef AVRO_FORWARD_map
#undef AVRO_FORWARD_record
#undef AVRO_FORWARD_union

#undef AVRO_FORWARD
#undef AVRO_ARRAY
#undef AVRO_ENUM_START
#undef AVRO_ENUM_SYMBOL
#undef AVRO_ENUM_END
#undef AVRO_FIXED
#undef AVRO_MAP
#undef AVRO_RECORD_START
#undef AVRO_RECORD_FIELD
#undef AVRO_RECORD_END
#undef AVRO_UNION_START
#undef AVRO_UNION_BRANCH
#undef AVRO_UNION_END
