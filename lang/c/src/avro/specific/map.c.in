/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

#include <stdint.h>

#include <avro/data.h>

/*
 * This file creates definitions for the functions that manipulate map
 * values.
 */


/* Define some helper macros */

#define AVRO_TYPE_REF(tp, type, ref)  AVRO_TYPE_REF_##type(tp, ref)

#define AVRO_TYPE_REF_boolean(tp, ref)      avro_raw_boolean_t
#define AVRO_TYPE_REF_bytes(tp, ref)        avro_raw_bytes_t
#define AVRO_TYPE_REF_float(tp, ref)        avro_raw_float_t
#define AVRO_TYPE_REF_double(tp, ref)       avro_raw_double_t
#define AVRO_TYPE_REF_int(tp, ref)          avro_raw_int_t
#define AVRO_TYPE_REF_long(tp, ref)         avro_raw_long_t
#define AVRO_TYPE_REF_null(tp, ref)         avro_raw_null_t
#define AVRO_TYPE_REF_string(tp, ref)       avro_raw_string_t

#define AVRO_TYPE_REF_array(tp, ref)        tp##_array_##ref##_t
#define AVRO_TYPE_REF_enum(tp, ref)         tp##_##ref##_t
#define AVRO_TYPE_REF_fixed(tp, ref)        tp##_##ref##_t
#define AVRO_TYPE_REF_map(tp, ref)          tp##_map_##ref##_t
#define AVRO_TYPE_REF_record(tp, ref)       tp##_##ref##_t
#define AVRO_TYPE_REF_recursive(tp, ref)    tp##_##ref##_t *
#define AVRO_TYPE_REF_union(tp, ref)        tp##_##ref##_t


#define AVRO_TYPE_INIT(tp, type, ref, name)  AVRO_TYPE_INIT_##type(tp, ref, name)

#define AVRO_TYPE_INIT_boolean(tp, ref, name)  *name = 0
#define AVRO_TYPE_INIT_bytes(tp, ref, name)    avro_raw_string_init(name)
#define AVRO_TYPE_INIT_float(tp, ref, name)    *name = 0
#define AVRO_TYPE_INIT_double(tp, ref, name)   *name = 0
#define AVRO_TYPE_INIT_int(tp, ref, name)      *name = 0
#define AVRO_TYPE_INIT_long(tp, ref, name)     *name = 0
#define AVRO_TYPE_INIT_null(tp, ref, name)     *name = 0
#define AVRO_TYPE_INIT_string(tp, ref, name)   avro_raw_string_init(name)

#define AVRO_TYPE_INIT_array(tp, ref, name)      tp##_array_##ref##_init(name)
#define AVRO_TYPE_INIT_enum(tp, ref, name)       *name = 0
#define AVRO_TYPE_INIT_fixed(tp, ref, name)      tp##_##ref##_init(&obj->name)
#define AVRO_TYPE_INIT_map(tp, ref, name)        tp##_map_##ref##_init(name)
#define AVRO_TYPE_INIT_record(tp, ref, name)     tp##_##ref##_init(name)
#define AVRO_TYPE_INIT_recursive(tp, ref, name)  *name = tp##_##ref##_new()
#define AVRO_TYPE_INIT_union(tp, ref, name)      tp##_##ref##_init(name)


#define AVRO_TYPE_DONE(tp, type, ref, name)  AVRO_TYPE_DONE_##type(tp, ref, name)

#define AVRO_TYPE_DONE_boolean(tp, ref, name)  (void) name
#define AVRO_TYPE_DONE_bytes(tp, ref, name)    avro_raw_string_done(name)
#define AVRO_TYPE_DONE_float(tp, ref, name)    (void) name
#define AVRO_TYPE_DONE_double(tp, ref, name)   (void) name
#define AVRO_TYPE_DONE_int(tp, ref, name)      (void) name
#define AVRO_TYPE_DONE_long(tp, ref, name)     (void) name
#define AVRO_TYPE_DONE_null(tp, ref, name)     (void) name
#define AVRO_TYPE_DONE_string(tp, ref, name)   avro_raw_string_done(name)

#define AVRO_TYPE_DONE_array(tp, ref, name)      tp##_array_##ref##_done(name)
#define AVRO_TYPE_DONE_enum(tp, ref, name)       (void) name
#define AVRO_TYPE_DONE_fixed(tp, ref, name)      tp##_##ref##_done(&obj->name)
#define AVRO_TYPE_DONE_map(tp, ref, name)        tp##_map_##ref##_done(name)
#define AVRO_TYPE_DONE_record(tp, ref, name)     tp##_##ref##_done(name)
#define AVRO_TYPE_DONE_recursive(tp, ref, name) \
	if (*name) { tp##_##ref##_free(*name); *name = NULL; }
#define AVRO_TYPE_DONE_union(tp, ref, name)      tp##_##ref##_done(name)


/* Define the macros that can be used in SCHEMA_DEFINITION */

#define AVRO_MAP(tp, name, itype, iref) \
	void \
	tp##_map_##name##_clear(tp##_map_##name##_t *obj) \
	{ \
		unsigned int  i; \
		for (i = 0; i < avro_raw_map_size(&obj->map); i++) { \
			AVRO_TYPE_REF(tp, itype, iref)  *elem = \
			    &avro_raw_map_get_by_index \
			    (&obj->map, \
			     AVRO_TYPE_REF(tp, itype, iref), i); \
			AVRO_TYPE_DONE(tp, itype, iref, elem); \
		} \
		avro_raw_map_clear(&obj->map); \
	} \
	\
	size_t \
	tp##_map_##name##_size(const tp##_map_##name##_t *obj) \
	{ \
		return avro_raw_map_size(&obj->map); \
	} \
	\
	AVRO_TYPE_REF(tp, itype, iref) * \
	tp##_map_##name##_get_by_index(const tp##_map_##name##_t *obj, \
				       unsigned int index) \
	{ \
		return &avro_raw_map_get_by_index \
		    (&obj->map, \
		     AVRO_TYPE_REF(tp, itype, iref), index); \
	} \
	\
	AVRO_TYPE_REF(tp, itype, iref) * \
	tp##_map_##name##_get(const tp##_map_##name##_t *obj, \
			      const char *key, unsigned int *index) \
	{ \
		return avro_raw_map_get(&obj->map, key, index); \
	} \
	\
	int \
	tp##_map_##name##_get_or_create(tp##_map_##name##_t *obj, \
					const char *key, \
					AVRO_TYPE_REF(tp, itype, iref) **element, \
					unsigned int *index) \
	{ \
		AVRO_TYPE_REF(tp, itype, iref) *elem = NULL; \
		int rval = \
		    avro_raw_map_get_or_create \
		    (&obj->map, key, (void **) &elem, index); \
		if (rval) { \
			AVRO_TYPE_INIT(tp, itype, iref, elem); \
		} \
		if (rval >= 0) { \
			*element = elem; \
		} \
		return rval; \
	}


#define AVRO_FORWARD(tp, type, name)                                  /* nothing */
#define AVRO_ARRAY(tp, name, itype, iref)                             /* nothing */
#define AVRO_ENUM_START(tp, name)                                     /* nothing */
#define AVRO_ENUM_SYMBOL(TP, NAME, symbol, value, first, last)        /* nothing */
#define AVRO_ENUM_END(tp, name)                                       /* nothing */
#define AVRO_FIXED(tp, name, size)                                    /* nothing */
#define AVRO_RECORD_START(tp, name)                                   /* nothing */
#define AVRO_RECORD_FIELD(tp, name, field, ftype, fref, first, last)  /* nothing */
#define AVRO_RECORD_END(tp, name)                                     /* nothing */
#define AVRO_UNION_START(tp, name)                                    /* nothing */
#define AVRO_UNION_BRANCH(tp, name, index, btype, bref, first, last)  /* nothing */
#define AVRO_UNION_END(tp, name)                                      /* nothing */


/* Call SCHEMA_DEFINITION to generate the code */

SCHEMA_DEFINITION()


/* Undefine everything when we're done */

#undef AVRO_TYPE_REF
#undef AVRO_TYPE_REF_boolean
#undef AVRO_TYPE_REF_bytes
#undef AVRO_TYPE_REF_float
#undef AVRO_TYPE_REF_double
#undef AVRO_TYPE_REF_int
#undef AVRO_TYPE_REF_long
#undef AVRO_TYPE_REF_null
#undef AVRO_TYPE_REF_string
#undef AVRO_TYPE_REF_array
#undef AVRO_TYPE_REF_enum
#undef AVRO_TYPE_REF_fixed
#undef AVRO_TYPE_REF_map
#undef AVRO_TYPE_REF_record
#undef AVRO_TYPE_REF_recursive
#undef AVRO_TYPE_REF_union

#undef AVRO_TYPE_INIT
#undef AVRO_TYPE_INIT_boolean
#undef AVRO_TYPE_INIT_bytes
#undef AVRO_TYPE_INIT_float
#undef AVRO_TYPE_INIT_double
#undef AVRO_TYPE_INIT_int
#undef AVRO_TYPE_INIT_long
#undef AVRO_TYPE_INIT_null
#undef AVRO_TYPE_INIT_string
#undef AVRO_TYPE_INIT_array
#undef AVRO_TYPE_INIT_enum
#undef AVRO_TYPE_INIT_fixed
#undef AVRO_TYPE_INIT_map
#undef AVRO_TYPE_INIT_record
#undef AVRO_TYPE_INIT_recursive
#undef AVRO_TYPE_INIT_union

#undef AVRO_TYPE_DONE
#undef AVRO_TYPE_DONE_boolean
#undef AVRO_TYPE_DONE_bytes
#undef AVRO_TYPE_DONE_float
#undef AVRO_TYPE_DONE_double
#undef AVRO_TYPE_DONE_int
#undef AVRO_TYPE_DONE_long
#undef AVRO_TYPE_DONE_null
#undef AVRO_TYPE_DONE_string
#undef AVRO_TYPE_DONE_array
#undef AVRO_TYPE_DONE_enum
#undef AVRO_TYPE_DONE_fixed
#undef AVRO_TYPE_DONE_map
#undef AVRO_TYPE_DONE_record
#undef AVRO_TYPE_DONE_recursive
#undef AVRO_TYPE_DONE_union

#undef AVRO_FORWARD
#undef AVRO_ARRAY
#undef AVRO_ENUM_START
#undef AVRO_ENUM_SYMBOL
#undef AVRO_ENUM_END
#undef AVRO_FIXED
#undef AVRO_MAP
#undef AVRO_RECORD_START
#undef AVRO_RECORD_FIELD
#undef AVRO_RECORD_END
#undef AVRO_UNION_START
#undef AVRO_UNION_BRANCH
#undef AVRO_UNION_END
